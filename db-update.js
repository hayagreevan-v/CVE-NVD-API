const mongoose = require('mongoose');

const Info = require('./models/info.model');
const CVE = require('./models/cve.model');

// mongoose.connect('mongodb://127.0.0.1:27017/nv-db').then(()=>{
//         console.log("MongoDB Connection Established");
//     })

const periodicUpdate = async () =>{

    console.log("--------------------------------------------------");
    console.log("PEROIDIC UPDATE STARTED!");
    console.log("Time : "+ (new Date().toLocaleString()));


    const info = await Info.findOne();

    let totalResults;
    const currentTime = new Date().toISOString();
    const response = await fetch(`https://services.nvd.nist.gov/rest/json/cvehistory/2.0/?changeStartDate=${info.lastModified.toISOString()}&changeEndDate=${currentTime}`);
    const data = await response.json();
    // console.log(`https://services.nvd.nist.gov/rest/json/cvehistory/2.0/?changeStartDate=${info.lastModified.toISOString()}&changeEndDate=${currentTime}`);
    if(data.resultsPerPage ==0){
        console.log("DATA IS UP-TO-DATE");
        console.log("--------------------------------------------------");
        return;
    }

    for(let c of data.cveChanges){
        const changedCVE = c.change.cveId;
        const res = await fetch(`https://services.nvd.nist.gov/rest/json/cves/2.0?cveId=${changedCVE}`);
        const cveData = await res.json();
        // console.log(cveData.vulnerabilities[0].cve);
        let updatedCVE = await CVE.findOneAndDelete({id: changedCVE});
        // console.log(updatedCVE);
        updatedCVE = await CVE.create(cveData.vulnerabilities[0].cve);
        await updatedCVE.save().then(()=>{
            console.log("Updated CVE ID : "+changedCVE);
            // console.log(updatedCVE);
        })
        await new Promise(r => setTimeout(r, 6000));
    }

    await fetch("https://services.nvd.nist.gov/rest/json/cves/2.0/?resultsPerPage=1&startIndex=0").then(async(response)=>{
        const res = await response.json()
        totalResults = res.totalResults;
    });
    
    const updatedInfo = await Info.findOneAndUpdate({},{
        totalResults:totalResults,
        lastModified: new Date()
    });
    updatedInfo.save().then(()=>{
        console.log("PERIODIC UPDATE DONE SUCCESSFULLY");
        console.log("Total Records Updated : "+data.cveChanges.length);
        console.log("--------------------------------------------------");
    });
}
// periodicUpdate();


module.exports = periodicUpdate;

const mongoose = require('mongoose');
const fs = require('fs');

const CVE = require("./models/cve.model");

async function fetchAndInsertData(i,totalPageCount){
    console.log("Fetching Data "+ i);
    if(i=== totalPageCount){
        clearInterval(interval);
        return;
    }
    const response = await fetch(`https://services.nvd.nist.gov/rest/json/cves/2.0/?resultsPerPage=1000&startIndex=${i*1000}`);
    const data = await response.json();
    if(data.resultsPerPage===0){
        return;
    }
    let count=0;
    for(let v of data.vulnerabilities){
        const newCVE = await CVE.create(v.cve);
        await newCVE.save().then(()=>{
        console.log(`Index : ${count+(i*1000)}, CVE ID : ${newCVE.id}`);
            count++;
        });
    }
    console.log(`Completed till Index : ${count+(i*1000)}`);
}

const dbDataLoader = async() =>{
    let totalResults =0;
    await fetch("https://services.nvd.nist.gov/rest/json/cves/2.0/?resultsPerPage=1&startIndex=0").then(async(response)=>{
        // totalResults = response.data.totalResults;
        const res = await response.json()
        totalResults = res.totalResults;
    });
    
    await mongoose.connect('mongodb://127.0.0.1:27017/nv-db').then(()=>{
        console.log("MongoDB Connection Established");
    })
    const totalPageCount = Math.ceil(totalResults/1000);
    
    const startTime = performance.now();
    let i=0;
    for(i=9;i< totalPageCount;i++){
        try{
           await setTimeout(await fetchAndInsertData(i,totalPageCount),1000); 
        }
        catch(e){
            // await setTimeout(await fetchAndInsertData(i,totalPageCount),3000);
            console.log(e);
            let errortext = i+" \n"+e+"\n";
            fs.appendFile('errorlog.txt',errortext,(err)=>{
                if(err){console.log(err);}
            });
        }
    }

    const endTime = performance.now();
    console.log("Ended at Page :"+i);
    console.log("Execution Time : "+((endTime-startTime)/1000) +" seconds");
}

dbDataLoader();
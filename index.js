const express = require("express");
const mongoose = require('mongoose');
const bodyParser = require("body-parser");

const CVE = require('./models/cve.model');
const Info = require('./models/info.model');

const filterRouter = require('./routes/filter.route');
const periodicUpdate = require('./db-update');

const app = express();
const PORT = 3001;

app.use(express.static("public"));
app.use(bodyParser.urlencoded({extended:true}));


mongoose.connect("mongodb://localhost:27017/nv-db?retryWrites=true&w=majority");
mongoose.connection.once('open',() =>{
    console.log("Connection Established");
});

app.get('/:id',async(req,res)=>{
    const id = req.params.id;
    const params = req.query;

    let sortMode= params.sortMode || 1;
    sortMode = parseInt(sortMode);

    let resultsPerPage = params.resultsPerPage || 10;
    resultsPerPage = parseInt(resultsPerPage);

    const info = await Info.findOne();

    if(params.sort!=undefined){
        let data;
        switch(params.sort){
            case "id" :
                console.log("sort : cveId");
                data = await CVE.find().sort({id : sortMode}).skip((id-1)*resultsPerPage).limit(resultsPerPage);
                res.render("index.ejs",{data:data, info:info, pageNo: id, resultsPerPage:resultsPerPage});
                break;
            case "publishedDate" :
                console.log("sort : publishedDate");
                data = await CVE.find().sort({published : sortMode}).skip((id-1)*resultsPerPage).limit(resultsPerPage);
                res.render("index.ejs",{data:data, info:info, pageNo: id, resultsPerPage:resultsPerPage});
                break;
            case "lastModified" :
                console.log("sort : lastModified");
                data = await CVE.find().sort({lastModified : sortMode}).skip((id-1)*resultsPerPage).limit(resultsPerPage);
                res.render("index.ejs",{data:data, info:info, pageNo: id, resultsPerPage:resultsPerPage});
                break;
            case "CVEScore" :
                console.log("sort : cveScore");
                // data = await CVE.find().sort({"metrics.cvssMetricV2.cvssData.baseScore": sortMode, "metrics.cvssMetricV30.cvssData.baseScore": sortMode,"metrics.cvssMetricV31.cvssData.baseScore": sortMode}).skip((id-1)*resultsPerPage).limit(resultsPerPage);
                data = await CVE.aggregate([
                    {
                        $project: {
                            unifiedBaseScore: {
                                $max: [
                                    { $ifNull: ["$metrics.cvssMetricV2.cvssData.baseScore", Number.NEGATIVE_INFINITY] },
                                    { $ifNull: ["$metrics.cvssMetricV30.cvssData.baseScore", Number.NEGATIVE_INFINITY] },
                                    { $ifNull: ["$metrics.cvssMetricV31.cvssData.baseScore", Number.NEGATIVE_INFINITY] }
                                ]
                            },
                            // Include other fields you need
                            id: 1,
                            sourceIdentifier: 1,
                            published: 1,
                            lastModified: 1,
                            vulnStatus: 1,
                            descriptions: 1,
                            metrics: 1
                        }
                    },
                    { $sort: { unifiedBaseScore: sortMode } }, // sortMode is your sorting direction
                    { $skip: (id - 1) * resultsPerPage },
                    { $limit: resultsPerPage }
                ]);

                res.render("index.ejs",{data:data, info:info, pageNo: id, resultsPerPage:resultsPerPage});
                break;
        }
    }else{
        data = await CVE.find().sort({published:sortMode}).skip((id-1)*resultsPerPage).limit(resultsPerPage);
        res.render("index.ejs",{data:data, info:info, pageNo: id, resultsPerPage:resultsPerPage});
    }
});


app.get('/cves/:id',async(req,res)=>{
    // console.log(req.params.id);
    // const response = await fetch(`https://services.nvd.nist.gov/rest/json/cves/2.0/?cveId=${req.params.id}`);
    // const data = await response.json();
    // console.log(data.vulnerabilities[0]);
    // res.render("cve-details.ejs",{data:data.vulnerabilities[0]});
    const id = req.params.id;
    const data = await CVE.findOne({id:id});
    // console.log(data);
    res.render("cve-details.ejs",{data:data});
});

app.use('/filter', filterRouter);

// Periodic Update
try{
    setInterval(periodicUpdate,30*60*1000); // 30 minutes
    
}catch(e){
    console.log(e);
}


app.listen(PORT,async()=>{
    console.log(`Server is running on PORT ${PORT}`);
    await new Promise(r => setTimeout(r, 2000));
    try{
        periodicUpdate();
    }catch(e){
        console.log(e);
    }
})